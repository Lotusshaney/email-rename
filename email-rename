#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright Â© 2012 Martin Ueding <dev@martin-ueding.de>

###############################################################################
#                                License (MIT)                                #
###############################################################################
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import argparse
import dateutil.parser
import email
import os.path
import shutil
import re

__docformat__ = "restructuredtext en"

def main():
    options = _parse_args()

    for filename in options.args:
        with open(filename, "rb") as f:
            m = email.message_from_file(f)

        date = dateutil.parser.parse(m["Date"])

        new_name = "{year:04d}{month:02d}{day:02d}-{hour:02d}{minute:02d}-{sender}-{subject}.eml".format(
            year = date.year,
            month = date.month,
            day = date.day,
            hour = date.hour,
            minute = date.minute,
            sender = filename_safe(get_email(m["From"])) if m["From"] is not None else "None",
            subject = filename_safe(m["Subject"]) if m["subject"] is not None else "None",
        )

        new_path = os.path.join(os.path.dirname(filename), new_name)

        if new_path != filename:
            print new_path

            if not options.dry:
                shutil.move(filename, new_path)

def get_email(sender):
    # Try to find just an email address.
    m = re.match(r"([^ ]+?@[^ ]+?\.[^ ]+?)", sender)

    if m is not None:
        return m.group(1)

    # Try to extract an email address.
    m = re.search(r"<([^ ]+?@[^ ]+?\.[^ ]+?)>", sender)
    if m is not None:
        return m.group(1)
    else:
        return None

def filename_safe(string):
    return ''.join([
        letter for letter in string
        if letter.isalnum()
        or letter in [".", ",", "-", "@", " ", ":"]
    ])

def _parse_args():
    """
    Parses the command line arguments.

    :return: Namespace with arguments.
    :rtype: Namespace
    """
    parser = argparse.ArgumentParser(description="Parses the email headers and renames the email according to date, author and subject.")
    parser.add_argument("args", metavar="email file", type=str, nargs="+", help=".eml files that should be parsed and renamed.")
    parser.add_argument("-n", dest="dry", action="store_true", help="Perform a dry run, do not rename.")
    #parser.add_argument("--version", action="version", version="<the version>")

    return parser.parse_args()


if __name__ == "__main__":
    main()
